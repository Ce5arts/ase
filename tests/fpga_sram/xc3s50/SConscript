import os

# import everything exported in SConstruct

Import('*')

PROJECT = "fpga_sram"

# various files generated by the Xilinx tools

srcfile=PROJECT+".vhdl"
utfile=PROJECT+".ut"
xstfile=PROJECT+".xst"
ngcfile=PROJECT+".ngc"
ngdfile=PROJECT+".ngd"
ucffile=PROJECT+".ucf"
pcffile=PROJECT+".pcf"
mapncdfile=PROJECT+"_map.ncd"
ncdfile=PROJECT+".ncd"
twrfile=PROJECT+".twr"
bitfile=PROJECT+".bit"

#
# Step 1: run xst to get the NGC file
#

if fpga in ["synthesize","translate","map","par","bitgen"]:
  ngc=env.Command(
    ngcfile,
    srcfile,
    [
      Mkdir("tmp/xst/projnav.tmp"),
      "xaw2vhdl -intstyle ise clock_generator.xaw -st XST clock_generator.vhdl",
      "xst -intstyle ise -ifn "+xstfile+" -ofn tmp/"+PROJECT+"_xst.log"
    ],
    chdir=1
  )

#
# Step 2: run ngdbuild to get the NGD file
#


if fpga in ["translate","map","par","bitgen"]:
  ngd=env.Command(
    ngdfile,
    ngcfile,
    [
      "ngdbuild -intstyle ise -dd _ngo -nt timestamp -uc "+ucffile+" -p xc3s50-vq100-5 "+ngcfile+" "+ngdfile
    ],
    chdir=1
  )

#
# Step 3: run map  to get the first NCD file
#

if fpga in ["map","par","bitgen"]:
  mapncd=env.Command(
    mapncdfile,
    ngdfile,
    [
      "map -intstyle ise -p xc3s50-vq100-5 -cm area -ir off -pr off -c 100 -o "+mapncdfile+" "+ngdfile+" "+pcffile
    ],
    chdir=1
  )

#
# Step 4: run par to get the NCD file
#

if fpga in ["par","bitgen"]:
  ncd=env.Command(
    ncdfile,
    mapncdfile,
    [
      "par -w -intstyle ise -ol high -t 1 "+mapncdfile+" "+ncdfile+" "+pcffile
    ],
    chdir=1
  )

  #
  # Step 5: run trce to get the post par static timing report
  #

  twr=env.Command(
    twrfile,
    ncdfile,
    [
      "trce -intstyle ise -v 3 -s 5 -n 3 -fastpaths -xml "+PROJECT+".twx "+ncdfile+" -o "+twrfile+" "+pcffile
    ],
    chdir=1
  )

#
# Step 6: run bitgen to get the output file
#

if fpga == "bitgen":
  bit=env.Command(
    bitfile,
    ncdfile,
    [
      "bitgen -intstyle ise -f "+utfile+" "+ncdfile
    ],
    chdir=1
  )

# 
# Add the numerous temporary files to be cleaned when -c is run
#

env.Clean(
    "clean",
    files=[
      "tmp",
      "_xmsgs",
      "_ngo",
      PROJECT+".lso",
      PROJECT+".ngc",
      PROJECT+".ngd",
      PROJECT+"_map.ngm",
      PROJECT+".ngr",
      PROJECT+".pad",
      PROJECT+".par",
      PROJECT+".twr",
      PROJECT+".xpi",
      PROJECT+".bgn",
      PROJECT+".drc",
      PROJECT+".ptwx",
      PROJECT+".twx",
      PROJECT+".unroutes",
      PROJECT+"_map.ncd",
      PROJECT+".ncd",
      PROJECT+"_xst.xrpt",
      PROJECT+"_ngdbuild.xrpt",
      PROJECT+"_bitgen.xwbt",
      PROJECT+"_map.xrpt",
      PROJECT+"_par.xrpt",
      PROJECT+"_summary.xml",
      PROJECT+"_usage.xml",
      PROJECT+".bld",
      PROJECT+"_map.mrp",
      PROJECT+"_map.map",
      PROJECT+"_pad.csv",
      PROJECT+"_pad.txt",
      PROJECT+".pcf",
      PROJECT+"_vhdl.prj",
      "clock_generator_arwz.ucf",
      "clock_generator.vhdl",
      "xaw2vhdl.log",
      "xlnx_auto_0_xdb",
      "usage_statistics_webtalk.html",
      "webtalk.log"
    ])

Return("bit")
